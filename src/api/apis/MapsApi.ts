/* tslint:disable */
/* eslint-disable */
/**
 * Distrologiq
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CalculateRouteDTO,
    CalculateRouteDTOFromJSON,
    CalculateRouteDTOToJSON,
    CalculateRouteResponse,
    CalculateRouteResponseFromJSON,
    CalculateRouteResponseToJSON,
    SearchPlacesResponse,
    SearchPlacesResponseFromJSON,
    SearchPlacesResponseToJSON,
} from '../models';

export interface CalculateRouteRequest {
    calculateRouteDTO: CalculateRouteDTO;
}

export interface SearchPlacesRequest {
    search: string;
}

/**
 * 
 */
export class MapsApi extends runtime.BaseAPI {

    /**
     */
    async calculateRouteRaw(requestParameters: CalculateRouteRequest): Promise<runtime.ApiResponse<CalculateRouteResponse>> {
        if (requestParameters.calculateRouteDTO === null || requestParameters.calculateRouteDTO === undefined) {
            throw new runtime.RequiredError('calculateRouteDTO','Required parameter requestParameters.calculateRouteDTO was null or undefined when calling calculateRoute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/maps/calculateRoute`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CalculateRouteDTOToJSON(requestParameters.calculateRouteDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CalculateRouteResponseFromJSON(jsonValue));
    }

    /**
     */
    async calculateRoute(calculateRouteDTO: CalculateRouteDTO): Promise<CalculateRouteResponse> {
        const response = await this.calculateRouteRaw({ calculateRouteDTO: calculateRouteDTO });
        return await response.value();
    }

    /**
     */
    async searchPlacesRaw(requestParameters: SearchPlacesRequest): Promise<runtime.ApiResponse<SearchPlacesResponse>> {
        if (requestParameters.search === null || requestParameters.search === undefined) {
            throw new runtime.RequiredError('search','Required parameter requestParameters.search was null or undefined when calling searchPlaces.');
        }

        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/maps/searchPlaces`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchPlacesResponseFromJSON(jsonValue));
    }

    /**
     */
    async searchPlaces(search: string): Promise<SearchPlacesResponse> {
        const response = await this.searchPlacesRaw({ search: search });
        return await response.value();
    }

}
