/* tslint:disable */
/* eslint-disable */
/**
 * Distrologiq
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SetSettingsDTO,
    SetSettingsDTOFromJSON,
    SetSettingsDTOToJSON,
    Settings,
    SettingsFromJSON,
    SettingsToJSON,
} from '../models';

export interface UpdateSettingsRequest {
    setSettingsDTO: SetSettingsDTO;
}

/**
 * 
 */
export class SettingsApi extends runtime.BaseAPI {

    /**
     */
    async getSettingsRaw(): Promise<runtime.ApiResponse<Settings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingsFromJSON(jsonValue));
    }

    /**
     */
    async getSettings(): Promise<Settings> {
        const response = await this.getSettingsRaw();
        return await response.value();
    }

    /**
     */
    async updateSettingsRaw(requestParameters: UpdateSettingsRequest): Promise<runtime.ApiResponse<Settings>> {
        if (requestParameters.setSettingsDTO === null || requestParameters.setSettingsDTO === undefined) {
            throw new runtime.RequiredError('setSettingsDTO','Required parameter requestParameters.setSettingsDTO was null or undefined when calling updateSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/settings`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SetSettingsDTOToJSON(requestParameters.setSettingsDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingsFromJSON(jsonValue));
    }

    /**
     */
    async updateSettings(setSettingsDTO: SetSettingsDTO): Promise<Settings> {
        const response = await this.updateSettingsRaw({ setSettingsDTO: setSettingsDTO });
        return await response.value();
    }

}
