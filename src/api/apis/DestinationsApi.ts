/* tslint:disable */
/* eslint-disable */
/**
 * Distrologiq
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateDestinationDTO,
    CreateDestinationDTOFromJSON,
    CreateDestinationDTOToJSON,
    Destination,
    DestinationFromJSON,
    DestinationToJSON,
    UpdateDestinationDTO,
    UpdateDestinationDTOFromJSON,
    UpdateDestinationDTOToJSON,
} from '../models';

export interface CreateDestinationRequest {
    createDestinationDTO: CreateDestinationDTO;
}

export interface GetDestinationRequest {
    id: number;
}

export interface RemoveDestinationRequest {
    id: number;
}

export interface UpdateDestinationRequest {
    id: number;
    updateDestinationDTO: UpdateDestinationDTO;
}

/**
 * 
 */
export class DestinationsApi extends runtime.BaseAPI {

    /**
     */
    async createDestinationRaw(requestParameters: CreateDestinationRequest): Promise<runtime.ApiResponse<Destination>> {
        if (requestParameters.createDestinationDTO === null || requestParameters.createDestinationDTO === undefined) {
            throw new runtime.RequiredError('createDestinationDTO','Required parameter requestParameters.createDestinationDTO was null or undefined when calling createDestination.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/destinations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDestinationDTOToJSON(requestParameters.createDestinationDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationFromJSON(jsonValue));
    }

    /**
     */
    async createDestination(createDestinationDTO: CreateDestinationDTO): Promise<Destination> {
        const response = await this.createDestinationRaw({ createDestinationDTO: createDestinationDTO });
        return await response.value();
    }

    /**
     */
    async getDestinationRaw(requestParameters: GetDestinationRequest): Promise<runtime.ApiResponse<Destination>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDestination.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/destinations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationFromJSON(jsonValue));
    }

    /**
     */
    async getDestination(id: number): Promise<Destination> {
        const response = await this.getDestinationRaw({ id: id });
        return await response.value();
    }

    /**
     */
    async getDestinationsRaw(): Promise<runtime.ApiResponse<Array<Destination>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/destinations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DestinationFromJSON));
    }

    /**
     */
    async getDestinations(): Promise<Array<Destination>> {
        const response = await this.getDestinationsRaw();
        return await response.value();
    }

    /**
     */
    async removeDestinationRaw(requestParameters: RemoveDestinationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeDestination.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/destinations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeDestination(id: number): Promise<void> {
        await this.removeDestinationRaw({ id: id });
    }

    /**
     */
    async updateDestinationRaw(requestParameters: UpdateDestinationRequest): Promise<runtime.ApiResponse<Destination>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDestination.');
        }

        if (requestParameters.updateDestinationDTO === null || requestParameters.updateDestinationDTO === undefined) {
            throw new runtime.RequiredError('updateDestinationDTO','Required parameter requestParameters.updateDestinationDTO was null or undefined when calling updateDestination.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/destinations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDestinationDTOToJSON(requestParameters.updateDestinationDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationFromJSON(jsonValue));
    }

    /**
     */
    async updateDestination(id: number, updateDestinationDTO: UpdateDestinationDTO): Promise<Destination> {
        const response = await this.updateDestinationRaw({ id: id, updateDestinationDTO: updateDestinationDTO });
        return await response.value();
    }

}
