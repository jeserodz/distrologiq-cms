/* tslint:disable */
/* eslint-disable */
/**
 * Distrologiq
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SignInDto,
    SignInDtoFromJSON,
    SignInDtoToJSON,
    SignInResponseDTO,
    SignInResponseDTOFromJSON,
    SignInResponseDTOToJSON,
} from '../models';

export interface SignInRequest {
    signInDto: SignInDto;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     */
    async signInRaw(requestParameters: SignInRequest): Promise<runtime.ApiResponse<SignInResponseDTO>> {
        if (requestParameters.signInDto === null || requestParameters.signInDto === undefined) {
            throw new runtime.RequiredError('signInDto','Required parameter requestParameters.signInDto was null or undefined when calling signIn.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/signIn`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignInDtoToJSON(requestParameters.signInDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SignInResponseDTOFromJSON(jsonValue));
    }

    /**
     */
    async signIn(signInDto: SignInDto): Promise<SignInResponseDTO> {
        const response = await this.signInRaw({ signInDto: signInDto });
        return await response.value();
    }

    /**
     */
    async verifyTokenRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/verifyToken`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async verifyToken(): Promise<string> {
        const response = await this.verifyTokenRaw();
        return await response.value();
    }

}
